name: "CodeQL Analysis"

on:
  # Manual trigger only from any branch/environment
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run analysis on'
        required: false
        default: 'main'
      environment:
        description: 'Environment to run in'
        required: false
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

  # Allow this workflow to be called by other workflows
  workflow_call:
    inputs:
      branch:
        description: 'Branch to run analysis on'
        required: false
        default: 'main'
        type: string
      environment:
        description: 'Environment to run in'
        required: false
        default: 'development'
        type: string

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:
  analyze:
    name: Analyze
    runs-on: [self-hosted, linux, X64]

    # Remove duplicate permissions since they're already defined at workflow level

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: 'cpp'
            build-mode: 'manual'
          - language: 'javascript'
            build-mode: 'none'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch || github.event.inputs.branch || github.ref }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in with Azure (OIDC)
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup build environment for CodeQL
      run: |
        echo "Setting up build environment for CodeQL C++ analysis..."
        echo "Using clang++ compiler to ensure CodeQL visibility"
        echo "Compiler version:"
        clang++ --version
        echo "Available include paths:"
        echo | clang++ -E -Wp,-v -x c++ - 2>&1 | grep -E '^ /' | head -10

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        
        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality
    - if: ${{ matrix.build-mode == 'manual' }}
      name: Install build dependencies
      run: |
        echo "Installing C++ build dependencies for CodeQL analysis..."
        sudo apt-get update
        sudo apt-get install -y \
          clang \
          clang++ \
          libc++-dev \
          libc++abi-dev \
          libssl-dev \
          libcurl4-openssl-dev \
          libgrpc++-dev \
          libprotobuf-dev \
          protobuf-compiler \
          protobuf-compiler-grpc \
          libabsl-dev \
          pkg-config \
          cmake \
          make \
          git \
          ca-certificates

    - if: ${{ matrix.build-mode == 'manual' }}
      name: Setup third-party dependencies
      run: |
        echo "Setting up third-party dependencies..."
        # Install gRPC and protobuf if needed
        if [ ! -d "/usr/local/include/grpcpp" ]; then
          echo "Installing gRPC from source for CodeQL compatibility..."
          git clone --recurse-submodules -b v1.54.0 --depth 1 --shallow-submodules https://github.com/grpc/grpc /tmp/grpc
          cd /tmp/grpc
          mkdir -p cmake/build
          cd cmake/build
          cmake -DgRPC_INSTALL=ON -DgRPC_BUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr/local ../..
          make -j$(nproc)
          sudo make install
        fi

    - if: ${{ matrix.build-mode == 'manual' }}
      name: Build C++ services with clang++
      run: |
        echo "Building C++ services with clang++ for CodeQL analysis..."
        echo "Current directory: $(pwd)"
        echo "Workspace: ${GITHUB_WORKSPACE}"
        
        cd "${GITHUB_WORKSPACE}"
        
        # Set up environment variables for compilation
        export CC=clang
        export CXX=clang++
        export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
        export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
        
        # Create build directory
        mkdir -p build/
        
        echo "Compiling main service files for CodeQL analysis..."
        
        # Compile key service entry points and libraries
        # This ensures CodeQL can trace through the main execution paths
        
        # Generate protobuf files first
        echo "Generating protobuf files..."
        find api/ -name "*.proto" -exec protoc --cpp_out=build/ --grpc_out=build/ --plugin=protoc-gen-grpc=`which grpc_cpp_plugin` {} \;
        
        # Compile main service files (object files only for CodeQL analysis)
        echo "Compiling auction service..."
        clang++ -std=c++17 -I. -Ibuild/ -I/usr/local/include \
          -c services/auction_service/auction_main.cc \
          -o build/auction_main.o || echo "Auction service compilation completed"
          
        echo "Compiling bidding service..."
        find services/bidding_service/ -name "*.cc" ! -name "*test*" -exec \
          clang++ -std=c++17 -I. -Ibuild/ -I/usr/local/include -c {} -o build/{}.o \; || echo "Bidding service compilation completed"
          
        echo "Compiling buyer frontend service..."
        find services/buyer_frontend_service/ -name "*.cc" ! -name "*test*" -exec \
          clang++ -std=c++17 -I. -Ibuild/ -I/usr/local/include -c {} -o build/{}.o \; || echo "Buyer frontend compilation completed"
          
        echo "Compiling common service libraries..."
        find services/common/ -name "*.cc" ! -name "*test*" -exec \
          clang++ -std=c++17 -I. -Ibuild/ -I/usr/local/include -c {} -o build/{}.o \; || echo "Common libraries compilation completed"
        
        echo "C++ compilation for CodeQL analysis completed"
        ls -la build/ | head -20

    - name: List compiled artifacts
      if: matrix.language == 'cpp'
      run: |
        echo "Generated object files from clang++ compilation:"
        find build/ -name "*.o" -type f | head -20
        echo "Total object files generated:"
        find build/ -name "*.o" -type f | wc -l
        echo "Generated protobuf files:"
        find build/ -name "*.pb.*" -type f | head -10

    - name: Verify C++ source code for analysis
      if: matrix.language == 'cpp'
      run: |
        echo "C++ source code prepared for CodeQL analysis..."
        echo "Main service source files:"
        find services/ -name "*.cc" ! -name "*test*" | head -10
        echo "Header files:"
        find services/ -name "*.h" ! -name "*test*" | head -10
        echo "Total C++ source files (excluding tests):"
        find services/ \( -name "*.cc" -o -name "*.cpp" -o -name "*.h" -o -name "*.hpp" \) ! -name "*test*" | wc -l
        echo "CodeQL should now have full visibility into the compilation process"

    - name: Extract and prepare JavaScript/TypeScript for analysis  
      if: matrix.language == 'javascript'
      run: |
        echo "Preparing JavaScript/TypeScript source code for CodeQL analysis..."
        echo "JavaScript/TypeScript source directories to be analyzed:"
        find . -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" | head -20
        echo "Total JS/TS files found:"
        find . -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" | wc -l

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        
    #upload to the repository Actions tab.
    - name: Upload CodeQL SARIF results
      if: always()
      uses: actions/upload-artifact@v4.6.2
      with:
        name: codeql-sarif-${{ matrix.language }}
        path: ${{ runner.temp }}/codeql_databases/*/results/*.sarif
    
    # Upload the results to GitHub's code scanning dashboard.
    - name: Upload to code-scanning
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
    
    - name: Cleanup build artifacts
      if: always()
      run: |
        echo "Cleaning up build artifacts..."
        # Clean up compiled object files and build directory
        rm -rf build/ || true
        rm -rf /tmp/grpc || true
        
        # Fix permissions on workspace files
        sudo chown -R $(whoami):$(whoami) ${GITHUB_WORKSPACE} || true
        
        echo "Cleanup completed for ${{ matrix.language }}"