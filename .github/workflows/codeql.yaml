name: "CodeQL Analysis"

on:
  # Manual trigger only from any branch/environment
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run analysis on'
        required: false
        default: 'main'
      environment:
        description: 'Environment to run in'
        required: false
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

  # Allow this workflow to be called by other workflows
  workflow_call:
    inputs:
      branch:
        description: 'Branch to run analysis on'
        required: false
        default: 'main'
        type: string
      environment:
        description: 'Environment to run in'
        required: false
        default: 'development'
        type: string

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:
  analyze:
    name: Analyze
    runs-on: [self-hosted, linux, X64]

    # Remove duplicate permissions since they're already defined at workflow level

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: 'cpp'
            build-mode: 'none'
          - language: 'javascript'
            build-mode: 'none'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch || github.event.inputs.branch || github.ref }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup CodeQL environment
      run: |
        echo "Setting up CodeQL environment for analysis..."
        echo "System information:"
        uname -a
        lsb_release -a 2>/dev/null || echo "lsb_release not available"
        
        echo "CodeQL will use 'none' build mode for both C++ and JavaScript"
        echo "This provides direct source code analysis without compilation"

    - name: Initialize CodeQL with enhanced configuration
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # Use comprehensive query suites for maximum security coverage
        queries: security-extended,security-and-quality
        # Enable dependency caching for better performance and accuracy
        dependency-caching: true
      env:
        # Set CodeQL extractor options for better C++ analysis accuracy
        CODEQL_EXTRACTOR_CPP_OPTION_INCLUDE_DIRECTORIES: "generated/config:generated/proto:/usr/include:/usr/local/include:services:api"
        CODEQL_EXTRACTOR_CPP_OPTION_DEFINE: "ENABLE_CORE_DUMPS=1,ENABLE_PROTECTED_AUDIENCE=1,CODEQL_ANALYSIS=1"
    - name: Setup comprehensive C++ dependencies for maximum CodeQL accuracy
      if: matrix.language == 'cpp'
      run: |
        echo "Setting up comprehensive C++ dependencies for maximum CodeQL accuracy..."
        echo "Installing complete development environment for better dependency resolution"
        
        # Update package lists
        sudo apt-get update
        
        # Install comprehensive C++ development environment
        echo "Installing complete C++ toolchain and standard libraries..."
        sudo apt-get install -y \
          build-essential \
          gcc-multilib \
          g++-multilib \
          libc6-dev \
          libc++-dev \
          libc++abi-dev \
          libstdc++-12-dev \
          linux-libc-dev \
          manpages-dev
        
        # Install system libraries commonly used in the project
        echo "Installing system and networking libraries..."
        sudo apt-get install -y \
          libssl-dev \
          libcurl4-openssl-dev \
          libz-dev \
          libzstd-dev \
          liblz4-dev \
          libsnappy-dev \
          libunwind-dev \
          libevent-dev \
          libatomic1
          
        # Install Google libraries and protobuf ecosystem
        echo "Installing Google libraries and protobuf ecosystem..."
        sudo apt-get install -y \
          libprotobuf-dev \
          protobuf-compiler \
          libgrpc++-dev \
          protobuf-compiler-grpc \
          libabsl-dev \
          libgoogle-glog-dev \
          libgflags-dev \
          libgtest-dev \
          libbenchmark-dev || echo "⚠️ Some Google libraries not available via apt"
          
        # Install AWS SDK dependencies
        echo "Installing AWS and cloud service dependencies..."
        sudo apt-get install -y \
          libaws-* \
          libcrypto++-dev \
          libcpprest-dev || echo "⚠️ Some AWS libraries not available via apt"
        
        # Install additional development tools
        echo "Installing development and analysis tools..."
        sudo apt-get install -y \
          pkg-config \
          cmake \
          ninja-build \
          git \
          ca-certificates \
          curl \
          wget
        
        echo "✅ Comprehensive C++ environment prepared for maximum CodeQL accuracy"

    - name: Generate protobuf files and handle custom macros for accuracy
      if: matrix.language == 'cpp'
      run: |
        echo "Generating protobuf files to improve CodeQL analysis accuracy..."
        
        # Create output directory for generated files
        mkdir -p generated/proto
        
        # Generate C++ files from .proto definitions
        echo "Generating C++ files from protobuf definitions..."
        if find api/ -name "*.proto" -print0 | xargs -0 -I {} protoc \
          --cpp_out=generated/proto/ \
          --grpc_out=generated/proto/ \
          --plugin=protoc-gen-grpc=$(which grpc_cpp_plugin 2>/dev/null || echo "grpc_cpp_plugin") \
          --proto_path=api/ \
          --proto_path=/usr/include/ \
          {}; then
          echo "✅ Protobuf files generated successfully"
        else
          echo "⚠️ Some protobuf files failed to generate, continuing with available sources"
        fi
        
        # Create a comprehensive configuration header for better macro resolution
        echo "Creating configuration header with common macros..."
        mkdir -p generated/config
        
        # Generate configuration header line by line to avoid YAML issues
        echo "// CodeQL Analysis Configuration Header" > generated/config/codeql_config.h
        echo "// This file provides macro definitions commonly used in the codebase" >> generated/config/codeql_config.h
        echo "// to improve CodeQL analysis accuracy" >> generated/config/codeql_config.h
        echo "" >> generated/config/codeql_config.h
        echo "#ifndef CODEQL_CONFIG_H" >> generated/config/codeql_config.h
        echo "#define CODEQL_CONFIG_H" >> generated/config/codeql_config.h
        echo "" >> generated/config/codeql_config.h
        echo "// Common feature macros" >> generated/config/codeql_config.h
        echo "#define ENABLE_CORE_DUMPS 1" >> generated/config/codeql_config.h
        echo "#define ENABLE_PROTECTED_AUDIENCE 1" >> generated/config/codeql_config.h
        echo "#define ENABLE_PROTECTED_APP_SIGNALS 1" >> generated/config/codeql_config.h
        echo "#define ENABLE_KANON 1" >> generated/config/codeql_config.h
        echo "" >> generated/config/codeql_config.h
        echo "// Common Google macros" >> generated/config/codeql_config.h
        echo "#define ABSL_HAVE_STD_STRING_VIEW 1" >> generated/config/codeql_config.h
        echo "#define GOOGLE_GLOG_DLL_DECL" >> generated/config/codeql_config.h
        echo "#define GFLAGS_DLL_DECL" >> generated/config/codeql_config.h
        echo "" >> generated/config/codeql_config.h
        echo "#endif // CODEQL_CONFIG_H" >> generated/config/codeql_config.h
        
        echo "✅ Configuration header created for better macro resolution"

    - name: Verify comprehensive C++ source structure for maximum accuracy
      if: matrix.language == 'cpp'
      run: |
        echo "Verifying comprehensive C++ source code structure for maximum CodeQL analysis accuracy..."
        
        echo "=== Source File Analysis ==="
        echo "Main service source files:"
        find services/ -name "*.cc" -o -name "*.cpp" | head -10
        echo "Header files:"
        find services/ -name "*.h" -o -name "*.hpp" | head -10
        echo "Generated protobuf files:"
        find generated/proto/ -name "*.pb.*" 2>/dev/null | head -10 || echo "No generated protobuf files"
        
        echo "=== File Counts ==="
        echo "Total C++ source files: $(find . -name "*.cc" -o -name "*.cpp" | wc -l)"
        echo "Total header files: $(find . -name "*.h" -o -name "*.hpp" | wc -l)"
        echo "Total protobuf definitions: $(find api/ -name "*.proto" | wc -l)"
        echo "Generated protobuf files: $(find generated/ -name "*.pb.*" 2>/dev/null | wc -l || echo 0)"
        
        echo "=== Include Directory Structure ==="
        echo "System includes:"
        ls -la /usr/include/c++/ 2>/dev/null | head -5 || echo "C++ headers not found in /usr/include/c++/"
        echo "Local includes available:"
        echo "- $(pwd)/services/ ($(find services/ -name "*.h" | wc -l) headers)"
        echo "- $(pwd)/api/ ($(find api/ -name "*.proto" | wc -l) proto files)"
        echo "- $(pwd)/generated/config/ ($(find generated/config/ -name "*.h" 2>/dev/null | wc -l || echo 0) config headers)"
        echo "- $(pwd)/generated/proto/ ($(find generated/proto/ -name "*.h" 2>/dev/null | wc -l || echo 0) generated headers)"
        
        echo "=== Third-party Library Headers ==="
        echo "Protobuf headers: $(ls /usr/include/google/protobuf/ 2>/dev/null | wc -l || echo 0) files"
        echo "gRPC headers: $(ls /usr/include/grpcpp/ 2>/dev/null | wc -l || echo 0) files"
        echo "Abseil headers: $(ls /usr/include/absl/ 2>/dev/null | wc -l || echo 0) files"
        
        echo "✅ Comprehensive C++ source structure verified for maximum CodeQL accuracy"

    - name: Create compilation database for enhanced accuracy
      if: matrix.language == 'cpp'
      run: |
        echo "Creating compilation database to guide CodeQL analysis..."
        
        # Create a simple compilation database to help CodeQL understand the project
        echo '[' > compile_commands.json
        echo '  {' >> compile_commands.json
        echo '    "directory": "'$(pwd)'",' >> compile_commands.json
        echo '    "command": "clang++ -std=c++17 -I. -Igenerated/config -Igenerated/proto -Iservices -Iapi -I/usr/include -I/usr/local/include -DENABLE_CORE_DUMPS=1 -DENABLE_PROTECTED_AUDIENCE=1 -DCODEQL_ANALYSIS=1 -c services/auction_service/auction_main.cc",' >> compile_commands.json
        echo '    "file": "services/auction_service/auction_main.cc"' >> compile_commands.json
        echo '  }' >> compile_commands.json
        echo ']' >> compile_commands.json
        
        # Verify the compilation database was created
        echo "Compilation database created:"
        ls -la compile_commands.json
        echo "Sample content:"
        head -5 compile_commands.json
        
        echo "✅ Compilation database created to enhance CodeQL analysis accuracy"

    - name: Verify CodeQL database preparation
      if: matrix.language == 'cpp'
      run: |
        echo "Verifying CodeQL database will be created from source analysis..."
        echo "CodeQL 'none' build mode will analyze source code directly"
        echo "No compilation artifacts needed - CodeQL creates its own AST"
        
        echo "C++ source files that will be analyzed:"
        find services/ -name "*.cc" -o -name "*.cpp" | head -10
        echo "Header files available for analysis:"
        find services/ -name "*.h" -o -name "*.hpp" | head -10
        echo "API definitions:"
        find api/ -name "*.proto" | head -5
        
        echo "✅ Source code ready for CodeQL database creation"

    - name: Extract and prepare JavaScript/TypeScript for analysis  
      if: matrix.language == 'javascript'
      run: |
        echo "Preparing JavaScript/TypeScript source code for CodeQL analysis..."
        echo "JavaScript/TypeScript source directories to be analyzed:"
        find . -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" | head -20
        echo "Total JS/TS files found:"
        find . -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" | wc -l

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        
    #upload to the repository Actions tab.
    - name: Upload CodeQL SARIF results
      if: always()
      uses: actions/upload-artifact@v4.6.2
      with:
        name: codeql-sarif-${{ matrix.language }}
        path: ${{ runner.temp }}/codeql_databases/*/results/*.sarif
    
    # Upload the results to GitHub's code scanning dashboard.
    - name: Upload to code-scanning
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
    
    - name: Cleanup workspace
      if: always()
      run: |
        echo "Cleaning up workspace..."
        # Fix permissions on workspace files
        sudo chown -R $(whoami):$(whoami) ${GITHUB_WORKSPACE} || true
        
        echo "Cleanup completed for ${{ matrix.language }}"